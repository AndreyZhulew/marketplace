// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     String   @default("user")
  products Product[]
  orders   Order[]
  deliveryInfo DeliveryInfo?
}

model DeliveryInfo {
  id       Int      @id @default(autoincrement())
  fullName String
  address  String
  index    Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @unique
}

// Модель товара
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  productType ProductType @relation(fields: [productTypeId], references: [id])
  productTypeId Int    @default(0)
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    Int
  images      ProductImage[]
  orderItems  OrderItem[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  subcategories Subcategory[]
}
model Subcategory {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  productTypes ProductType[]
}
model ProductType {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  alias       String
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId  Int   @unique
  product     Product[]
}

// Модель заказа
model Order {
  id          Int      @id @default(autoincrement())
  buyer       User     @relation(fields: [buyerId], references: [id])
  sellerId    Int
  buyerId     Int
  orderDate   DateTime
  status      String
  totalAmount Float
  orderItems  OrderItem[]
}

// Модель элемента заказа
model OrderItem {
  id        Int    @id @default(autoincrement())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  subtotal  Float
}

// Модель изображения товара
model ProductImage {
  id        Int    @id @default(autoincrement())
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}